### Upload HDF5 file and generate circuit consisting of Unitary Gates

### This code is to upload one circuit at a time.
def load_gates_hdf5(filename):
    gates = {}
    with h5py.File(filename, "r") as file:
        for key in file.keys():
            # Load the matrix from file.
            matrix = file[key][:]
            # Parse the key to determine the gate index.
            # Expected key format: "layerX_gateY"
            parts = key.split('_')
            gate_str = parts[1]  # e.g., "gate2"
            gate_index = int(gate_str.replace("gate", ""))
            
            # If it's a two-qubit gate (4x4) and not the first gate, transpose it.
            if matrix.shape == (4,4) and gate_index != 1:
                matrix = np.transpose(matrix)
            
            gates[key] = matrix
            #print(f"{key} loaded with shape {matrix.shape}:\n{matrix}\n")
    return gates

def generate_quantum_circuit_from_dict(gates_dict):
    # Organize gates by layer.
    layers = {}
    for key, matrix in gates_dict.items():
        # key expected to be like "layerX_gateY"
        parts = key.split('_')
        layer_str = parts[0]  # "layerX"
        gate_str  = parts[1]  # "gateY"
        L = int(layer_str.replace("layer", ""))
        G = int(gate_str.replace("gate", ""))
        if L not in layers:
            layers[L] = {}
        layers[L][G] = matrix

    # Sort layers by layer number and sort gates within each layer.
    sorted_layers = {}
    for L in sorted(layers.keys()):
        sorted_layers[L] = [layers[L][g] for g in sorted(layers[L].keys())]

    # Assume the number of qubits is determined by the number of gates in any layer.
    # (Each layer should contain N gates.)
    first_layer = sorted_layers[next(iter(sorted_layers))]
    n = len(first_layer)
    qc = QuantumCircuit(n)

    # For each layer, append the corresponding gates.
    for L in sorted(sorted_layers.keys()):
        gate_list = sorted_layers[L]
        # Append two-qubit gates for indices 0 to n-2.
        for i in range(n - 1):
            gate = UnitaryGate(gate_list[i], label=f"L{L} G{i+1}")
            qc.append(gate, [i, i+1])
        # Append the final gate (one-qubit) on the last qubit.
        gate = UnitaryGate(gate_list[-1], label=f"L{L} G{n}")
        qc.append(gate, [n-1])
   

    return qc

# Example usage:
gates = load_gates_hdf5("gates_N$N_D$D.h5")

# Generate the quantum circuit from the loaded multi-layer gates and draw it on Qiskit
qc = generate_quantum_circuit_from_dict(gates)
print("The resulting circuit with a depth: ", qc.depth())
qc.draw("mpl")



### Can also upload and generate multiple circuits of fixed N and varying depth D. I used this code to simultaneously run the VQE simulations for various depths to determine how the depth composition for a fixed qubit number affects performance.


def load_gates_hdf5(filename):
    gates = {}
    with h5py.File(filename, "r") as file:
        for key in file.keys():
            
            matrix = file[key][:]
            parts = key.split('_')
            gate_str = parts[1] 
            gate_index = int(gate_str.replace("gate", ""))
            
            if matrix.shape == (4,4) and gate_index != 1:
                matrix = np.transpose(matrix)
            
            gates[key] = matrix
            #print(f"{key} loaded with shape {matrix.shape}:\n{matrix}\n")
    return gates

def generate_quantum_circuit_from_dict(gates_dict):
    # 1) Group matrices by layer number and gate index
    layers = {}
    for key, matrix in gates_dict.items():
        layer_str, gate_str = key.split("_")         # e.g. "layer3", "gate2"
        L = int(layer_str.replace("layer", ""))
        G = int(gate_str.replace("gate", ""))
        layers.setdefault(L, {})[G] = matrix

    # 2) Build a list-of-lists: sorted_layers[L_idx] = [mat_gate1, mat_gate2, ...]
    sorted_layers = []
    for L in sorted(layers.keys()):
        # sort gate indices within this layer
        row = [layers[L][g] for g in sorted(layers[L].keys())]
        sorted_layers.append(row)

    # 3) Determine qubit count (gates per layer)
    n = len(sorted_layers[0])
    qc = QuantumCircuit(n)

    # 4) Append gates in layer order
    for L_idx, gate_list in enumerate(sorted_layers, start=1):
        # two-qubit gates on qubits (0,1), (1,2), ..., (n-2,n-1)
        for i, mat in enumerate(gate_list[:-1]):
            qc.append(UnitaryGate(mat, label=f"L{L_idx}G{i+1}"), [i, i+1])
        # single-qubit gate on qubit (n-1)
        qc.append(UnitaryGate(gate_list[-1], label=f"L{L_idx}G{n}"), [n-1])

    return qc

def load_all_tnqc_circuits(n_sites, max_depth=10):
    circuits = {}
    pattern = f"gates_N{n_sites}_D*.h5"
    for fname in sorted(glob.glob(pattern)):
        m = re.match(rf"gates_N{n_sites}_D(\d+)\.h5", fname)
        if not m: 
            continue
        depth = int(m.group(1))
        if 1 <= depth <= max_depth:
            gates = load_gates_hdf5(fname)
            qc = generate_quantum_circuit_from_dict(gates)
            circuits[depth] = qc
            print(f"Loaded depth {depth} â†’ circuit depth {qc.depth()}") 
    return circuits

# Example Usage:
n_sites = n -> number of sites of MPS
max_depth = D -> chosen depth range, determined in your julia notebook

circuits_by_depth = load_all_tnqc_circuits(n_sites, max_depth)
