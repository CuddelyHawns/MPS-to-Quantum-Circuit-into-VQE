### The TNQC is the tensor network quantum circuit which encodes the MPS. The generate_mpds and deep! function follow the algorithm outlined by [source]. 

function generate_mpds(psi)
    N = length(psi)
    psi = copy(psi)
    mpds = Dict{Int, ITensor}()
    
    for n = 1
        i = inds(psi[n], "Site")[1]
        j = commoninds(psi[n], psi[n+1])[1]
        
        Array_tensor1 = Array(psi[n], i,j)

        T = zeros(2,2,2,2)
        T[:,:,1,1] = Array_tensor1

        i2,j2,k2,l2 = prime(siteinds(psi, n)), prime(siteinds(psi, n+1)), siteinds(psi, n), siteinds(psi, n+1)
        tensor = ITensor(T, i2,j2,k2,l2)
        U,S,V = svd(tensor, i2,j2)

        S1 = delta(commonind(U,S), commonind(S,V))
        
        mpds[n] = U * S1 * V  
    end

    for n in 2:N-1
        i = inds(psi[n], "Site")[1]
        j = commoninds(psi[n], psi[n+1])[1]
        k = commoninds(psi[n-1], psi[n])[1]

        Array_tensor2 = Array(psi[n], i,j,k)

        G = zeros(2,2,2,2)
        G[:,:,:,1] = Array_tensor2 

        i2,j2,k2,l2 = prime(siteinds(psi, n)), prime(siteinds(psi, n+1)), siteinds(psi, n), siteinds(psi, n+1)
        tensor = ITensor(G, i2,j2,k2,l2)

        U,S,V = svd(tensor, i2,j2)
        S1 = delta(commonind(U,S), commonind(S,V))
        
        mpds[n] = U * S1 * V
    end

    for n = N
        i = inds((psi[n]), "Site")[1]
        j = commoninds(psi[n-1], psi[n])[1]
        mpds[n] = replaceinds(psi[n], i => prime(i), j => inds((psi[n]), "Site")[1])
    end
    return mpds
end



function dagger!(mpds)
"""
This function helps with turning the circuit, U, into dag(U), and reverses the order of contraction. This disentangles the MPS towards a product state.
"""
    mpds_dag = [dag(t) for t in mpds]
    for t in mpds_dag
        swapprime!(t, 0=>1)
    end
    return reverse(mpds_dag)
end


function deep!(psi_non_truncated, D) 
"""
Creates a circuit of depth D. More depth corresponds to more fidelity to the initial MPS
"""
    N = length(sites)
    circuit_layers = Vector{Vector{ITensor}}(undef, D)
    
    psi_current = copy(psi_non_truncated)
    for d in 1:D
        psi_trunc = truncate(psi_current, maxdim=2)
        mpds = generate_mpds(psi_trunc)
        ordered_keys = sort(collect(keys(mpds)))
        mpds_vec = [mpds[n] for n in ordered_keys]
        mpds_vec = dagger!(mpds_vec)

        
        circuit_layers[d] = mpds_vec
        # Apply the MPDs to psi_current to get the next state
        psi_current = apply(mpds_vec, psi_current)
    end
    
    return circuit_layers
end



function reverse_deep!(circuit_layers)
"""
Reverses the order of gate and depth contraction, such as the circuit entangles the product state towards the MPS.
"""
    reversed_circuit = Vector{Vector{ITensor}}(undef, length(circuit_layers))
    
    for (i, layer) in enumerate(reverse(circuit_layers))
        reversed_layer = Vector{ITensor}(undef, length(layer))
        for (j, tensor) in enumerate(reverse(layer))
            reversed_layer[j] = swapprime(dag(tensor), 0=>1)
        end
        reversed_circuit[i] = reversed_layer
    end
    
    return reversed_circuit
end

function reverse_attract!(reversed_circuit, product_state)
"""
Contracts the circuit with the product state, outputting a state with high fidelity to the initial MPS.
"""
    D = length(reversed_circuit)
    state = copy(product_state)
    
    for d in 1:D
        state = apply(reversed_circuit[d], state)
    end

    return state
end

### Example Usage
psi_non_truncated = copy(psi_non_truncated) -> initial MPS
product_state = copy(product_state) -> product state

D >= 1
circuit_layers = deep!(psi_non_truncated, D) -> Generate disentangling circuit
actual_circuit = reverse_deep!(circuit_layers) -> Generate the entangling quantum circuit.
state = reverse_attract!(actual_circuit, product_state) -> resulting state
fidelity = abs(inner(psi_non_truncated, state)) -> fidelity check
