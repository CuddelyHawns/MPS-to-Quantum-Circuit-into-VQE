### Here, we take our variational TNQC, define a cost function (based on our hamiltonian), and use scipy.optimizers to drive the circuit towards the ground state. The reason we don't use Qiskit's VQE function is because we keep don't parameterise the TNQC and keep it as a unitary gate. Eitherway, the VQE function is just a wrapper for scipy, so we expect a similar performance.
### Again, there are two scripts, the first is to run the optimization on a single circuit. The second takes augmented_circuits and runs the optimization for every single circuit. This way we can see how varying the depths ofthe circuits affects performance (from an accuracy standpoint).


### Single Circuit Optimization: 

# defining energy cost function
def energy(param_vals):
    
    bound = full_circ.assign_parameters({p: v for p, v in zip(params, param_vals)}, inplace=False)
    psi = Statevector.from_instruction(bound).data
    H_mat = hamiltonian if isinstance(hamiltonian, np.ndarray) else Operator(hamiltonian).data
    return np.real(np.vdot(psi, H_mat.dot(psi)))

init_vals = np.ones(len(params)) # we chose ones since U(1)*dag(U(1)) = I

energies = []

def record_energy(xk):
    energies.append(energy(xk))  

# optimization
res = minimize(energy, init_vals, method='COBYLA', callback=record_energy)
opt_vals = res.x

# Overview of ground state
if 'groundstate_value' in globals():
    print("Energy of TNQC:", np.real(Energy))
    print("Energy of initial guess:", np.real(energies[0]))
    print(f"Optimized energy: {res.fun:.8f}")
    print(f"Exact ground-state energy: {groundstate_value:.8f}")
    print(f"Energy error: {res.fun - groundstate_value:.2e}")
    print(f"Percentage Error (%): {(np.abs((res.fun - groundstate_value) / groundstate_value) * 100)}")

# Convergence graph
plt.figure()
plt.plot(energies)
plt.xlabel('Iteration')
plt.ylabel('Energy ⟨ψ|H|ψ⟩')
plt.title('Variational Energy vs. Iteration')
plt.tight_layout()
plt.show()


### Many Circuit Optimiztion:
records = []
for (D, p), qc in augmented_circuits.items():
    n_qubits = qc.num_qubits

    
    H_mat = (hamiltonian 
         if isinstance(hamiltonian, np.ndarray) 
         else Operator(hamiltonian).data)

    # pull out the right parameters and minimize...
    params = [param for param in qc.parameters
              if param.name.startswith(f"ϕ_D{D}_p{p}_")]
    init_vals = np.ones(len(params))

    def energy_fn(x, qc=qc, params=params, H=H_mat):
        bound = qc.assign_parameters({p:v for p,v in zip(params, x)}, inplace=False)
        psi   = Statevector(bound).data
        return float(np.real(np.vdot(psi, H.dot(psi))))

    res = minimize(energy_fn, init_vals, method='COBYLA')
    pct_err = abs((res.fun - groundstate_value)/groundstate_value)*100


    # Records the final percentage error for each circuit composition
    records.append({
      'qubits':   n_qubits,
      'MPS_depth':D,
      'var_depth':p,
      'pct_error':pct_err
    })

df = pd.DataFrame(records)
df = df.sort_values(['MPS_depth','var_depth']).reset_index(drop=True)
# Outputs final pct_error for each circuit
print(df.to_string(index=False)) 



# Outputs the circuit composition that achieves the most accurate ground state
best_idx  = df['pct_error'].idxmin()
best_row  = df.loc[best_idx]
D_best    = int(best_row['MPS_depth'])
p_best    = int(best_row['var_depth'])
err_best  = best_row['pct_error']

print(f"Lowest error = {err_best:.4f}% at MPS_depth={D_best}, var_depth={p_best}")
best_circ = augmented_circuits[(D_best, p_best)]
best_circ.draw('mpl')


# A cool visual of how the performance of the circuit varies with depth. You get a surface, and you can pinpoint which compositions are generally better.

pivot = df.pivot(index='MPS_depth', columns='var_depth', values='pct_error')

# Create meshgrid for surface plot
X, Y = np.meshgrid(pivot.columns.values, pivot.index.values)
Z = pivot.values

# Plotting with a color gradient
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
surf = ax.plot_surface(X, Y, Z, cmap='viridis', edgecolor='none')
ax.set_xlabel('Variational Tail Depth (p)')
ax.set_ylabel('TNQC Depth (D)')
ax.set_zlabel('Fidelity Error (%)')
plt.title('Error Landscape vs TNQC Depth and Variational Depth')

# Add a color bar to indicate the mapping of error values to colors
fig.colorbar(surf, ax=ax, shrink=0.5, aspect=10, label='Fidliity Error (%)')
ax.view_init(elev=25, azim=170)
plt.show()




