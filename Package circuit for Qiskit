### How to save the circuit as a HDF5 file.

using HDF5, OrderedCollections

### Saving one circuit of chosen depth
function package!(actual_circuit)
"""
We convert the quantum circuit, which is an ITensor multidimensional object to an array and save the arrays as a HDF5 file. This script saves a circuit of a chosen depth D.
"""
    D = length(actual_circuit)
    packaged_layers = Vector{Any}(undef, D)
    
    for d in 1:D
        layer = actual_circuit[d]
        N = length(layer)
        matrix_gates = Vector{Any}(undef, N)
        
        # Process the first N-1 gates as two-qubit gates.
        for n in 1:N-1
            gate = layer[n]
            s1_out = inds(gate, "Site")[1]
            s2_out = inds(gate, "Site")[2]
            s1_in  = inds(gate, "Site")[3]
            s2_in  = inds(gate, "Site")[4]
            gate_array = Array(gate, (s1_out, s2_out, s1_in, s2_in))
            matrix_gates[n] = reshape(gate_array, (4,4))
        end
        
        # Process the final gate (assumed to be a one-qubit gate).
        gate = layer[N]
        s1_out = inds(gate, "Site")[1]
        s1_in  = inds(gate, "Site")[2]
        gate_array = Array(gate, (s1_out, s1_in))
        matrix_gates[N] = reshape(gate_array, (2,2))
        
        packaged_layers[d] = matrix_gates
    end
    
    return packaged_layers
end

function savepackage!(filename::String, packaged_layers::Vector{Any})
    # Open an HDF5 file in write mode.
    h5open(filename, "w") do file
        for (layer_idx, layer) in enumerate(packaged_layers)
            for (gate_idx, gate) in enumerate(layer)
                key = "layer$(layer_idx)_gate$(gate_idx)"
                write(file, key, gate)
            end
        end
    end
end

# Example usage:
# Suppose `actual_circuit` is already defined and you obtain packaged_layers:
packaged_layers = package!(actual_circuit)

# Let N be the number of sites (you can get it from the length of a layer) and D the depth.
N = length(actual_circuit[1])  # Number of gates in one layer corresponds to N sites.
D = length(actual_circuit)     # Depth of the circuit.

# Save the gates to an HDF5 file with a filename that encodes N and D.
filename = "gates_N$(N)_D$(D).h5"
savepackage!(filename, packaged_layers)
println("Saved circuit for N = $N and depth D = $D to ", filename)




### Saving multiple circuits of various depths

ψ    = copy(psi_non_truncated)
prod = copy(product_state)

function generate_circuits_range(ψ0, prod0; depths=1:10)
"""
We convert the quantum circuit, which is an ITensor multidimensional object to an array and save the arrays as a HDF5 file. This script saves a multiple circuits for a range of chosen depth D.
"""
    depths_vec = sort(collect(depths))           
    circuits = OrderedDict{Int, Vector{Any}}()
    for d in depths_vec
        ψ    = copy(psi_non_truncated)
        prod = copy(product_state)
        layers = deep!(ψ, d)                     
        circuits[d] = reverse_deep!(layers)      
    end
    return circuits
end

function package!(actual_circuit::Vector{<:Any})
    D = length(actual_circuit)
    packaged = Vector{Any}(undef, D)
    for d in 1:D
        layer = actual_circuit[d]
        N = length(layer)
        mats = Vector{Any}(undef, N)
        # two-qubit gates
        for n in 1:N-1
            gate = layer[n]
            o1,o2,i1,i2 = inds(gate, "Site")
            A = Array(gate, (o1,o2,i1,i2))
            mats[n] = reshape(A, 4, 4)
        end
        # single-qubit gate
        gate = layer[N]
        o,i = inds(gate, "Site")
        A = Array(gate, (o,i))
        mats[N] = reshape(A, 2, 2)

        packaged[d] = mats
    end
    return packaged
end

function savepackage!(filename::String, packaged_layers::Vector{Any})
    h5open(filename, "w") do file
        for (li, layer) in enumerate(packaged_layers)
            for (gi, gate_mat) in enumerate(layer)
                ds = "layer$(li)_gate$(gi)"
                write(file, ds, gate_mat)
            end
        end
    end
end


function save_all_depths!(
        ψ0, prod0;
        depths = 1:10,
        out_prefix = "gates_N" )
    
    circuits_by_depth = generate_circuits_range(ψ0, prod0; depths=depths)

   
    for (d, circuit_layers) in circuits_by_depth
        
        mats = package!(circuit_layers)

        N = length(circuit_layers[1])

        fname = "$(out_prefix)$(N)_D$(d).h5"

        savepackage!(fname, mats)
        println("Saved depth $d (N=$N) → $fname")
    end
end

save_all_depths!(psi_non_truncated, product_state; depths=1:10)
